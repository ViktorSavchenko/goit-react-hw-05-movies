{"version":3,"file":"static/js/268.e552550e.chunk.js","mappings":"oOA+CA,EA5Ce,SAAC,GAAoB,IAAlBA,EAAiB,EAAjBA,WAEhB,OACE,eAAIC,UAAU,cAAd,SACGD,EAAWE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACd,gBAEEL,UAAU,oBAFZ,UAIGG,GACE,gBACCG,IAAG,6CAAwCH,GAC3CI,IAAKH,EACLI,MAAM,KACNC,OAAO,KACPT,UAAU,6BAEX,gBACCM,IAAI,uIACJC,IAAKH,EACLI,MAAM,KACNC,OAAO,KACPT,UAAU,6BAId,iBAAKA,UAAU,sBAAf,WACE,eAAGA,UAAU,yBAAb,uBAEE,iBAAMA,UAAU,yBAAhB,SAA0CI,QAG5C,eAAGJ,UAAU,8BAAb,4BAEE,iBAAMA,UAAU,yBAAhB,SAA0CK,YA5BzCH,EAFO,KAsCrB,ECxCKQ,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAuCZ,EApCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAASH,GAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRH,EAAUL,GACVS,MAAM,sCAAD,OAAuCR,EAAvC,qEAAkHS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAN,IAC1HF,MAAK,SAAAG,GACJN,EAAeM,EAAOC,MACtBT,EAAUL,EACX,IACAe,OAAM,SAAAC,GACLX,EAAU,SACX,GACJ,GAAE,CAACJ,IAEAG,IAAWJ,GAEX,wCAIAI,IAAWJ,GAAyC,IAAtBM,EAAYW,QAE1C,SAAC,EAAD,CAAQ5B,WAAYiB,IAIpBF,IAAWJ,GAAyC,IAAtBM,EAAYW,QAE1C,SAACC,EAAA,EAAD,wDAFJ,CAKD,C","sources":["components/Actors/Actors.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport './Actors.css'\n\nconst Actors = ({ dataActors }) => {\n  \n  return (\n    <ul className='Actors-list'>\n      {dataActors.map(({ id, profile_path, original_name, character }) => (\n        <li\n          key={id}\n          className='Actors-list__item'\n        >\n          {profile_path ?\n            (<img\n              src={`https://image.tmdb.org/t/p/original${profile_path}`}\n              alt={original_name}\n              width='40'\n              heigth='55'\n              className='Actors-list__item-image'\n            />) :\n            (<img\n              src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRlmaOOtC7388IqzDT53w6yk54PdRDs3o85gZJ8GH6zRipRYt4nDpfsIsJ2cPaZBiEPKhY&usqp=CAU\"\n              alt={original_name}\n              width='40'\n              heigth='55'\n              className='Actors-list__item-image'\n            />) \n          }\n            \n          <div className='Description-wrapper'>\n            <p className='Actors-list__item-name'>\n              Name:&nbsp;\n              <span className='Actors-list__item-span'>{original_name}</span>\n            </p>\n              \n            <p className='Actors-list__item-character'>\n              Character:&nbsp;\n              <span className='Actors-list__item-span'>{character}\n              </span>\n            </p>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Actors;\n\nActors.propTypes = {\n  dataActors: PropTypes.arrayOf(\n  PropTypes.shape({\n    id: PropTypes.number,\n    profile_path: PropTypes.string,\n    original_name: PropTypes.string,\n    character: PropTypes.string,\n  }))\n};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport NotFound from \"components/NotFound/NotFound\";\nimport Actors from 'components/Actors/Actors';\n\nconst STATUS = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [movieActors, setMovieActors] = useState([]);\n  \n  useEffect(() => {\n    setStatus(STATUS.LOADING);\n    fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=17cad80f9662381de06e4551c499d7de&language=en-US`).then(r => r.json())\n      .then(actors => {\n        setMovieActors(actors.cast);\n        setStatus(STATUS.RESOLVED);\n      })\n      .catch(error => {\n        setStatus('reject');\n      });\n  }, [movieId]);\n  \n  if (status === STATUS.LOADING) { \n    return (\n      <div>LOADING...</div>\n    );\n  };\n  \n  if (status === STATUS.RESOLVED && movieActors.length !==0) { \n    return (\n      <Actors dataActors={movieActors } />\n    );\n  };\n  \n  if (status === STATUS.REJECTED || movieActors.length ===0) { \n    return (\n      <NotFound>All actors wished to be incognito :)</NotFound>\n    );\n  };\n};\n\nexport default Cast;\n\n"],"names":["dataActors","className","map","id","profile_path","original_name","character","src","alt","width","heigth","STATUS","movieId","useParams","useState","status","setStatus","movieActors","setMovieActors","useEffect","fetch","then","r","json","actors","cast","catch","error","length","NotFound"],"sourceRoot":""}